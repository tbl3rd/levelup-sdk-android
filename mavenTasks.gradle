/*
 * Sets up info for a POM for a maven install/publish task.
 *
 * Set up your local sonatype credentials by editing/creating ~/.gradle/gradle.properties and enter:
 * signing.keyId=<HEXADECIMCAL KEY ID RETRIVABLE VIA gpg --list-keys>
 * signing.password=<KEY PASSWORD>
 * signing.secretKeyRingFile=<PATH TO KEY RING, USUALLY ~/.gnupg/secring.gpg>
 * SONATYPE_USERNAME=<SONATYPE USERNAME>
 * SONATYPE_PASSWORD=<CORRESPONDING PASSWORD>
 *
 * Copyright (C) 2014 SCVNGR, Inc. d/b/a LevelUp
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

def setupPomInfo(pom) {
    pom.groupId = POM_GROUP_ID
    pom.artifactId = POM_ARTIFACT_ID
    pom.version = ANDROID_APP_VERSION_NAME

    pom.project {
        name POM_NAME
        packaging "aar"
        description POM_DESCRIPTION
        url POM_URL

        scm {
            url POM_SCM_URL
            connection POM_SCM_CONNECTION
            developerConnection POM_SCM_DEVELOPER_CONNECTION
        }

        licenses {
            license {
                name POM_LICENSE_NAME
                url POM_LICENSE_URL
                distribution 'repo'
            }
        }

        developers {
            developer {
                id POM_DEVELOPER_ID
                name POM_DEVELOPER_NAME
            }
        }
    }
}

// Extra task definition is needed to work around naming conflict between maven and android plugins
// http://stackoverflow.com/questions/18559932
task installArchives(type: Upload) {
    description "Installs artifacts to mavenLocal."
    repositories.mavenInstaller {
        configuration = configurations.default
        setupPomInfo(pom)
    }
}

ext.SONATYPE_USERNAME = properties.get('SONATYPE_USERNAME', '')
ext.SONATYPE_PASSWORD = properties.get('SONATYPE_PASSWORD', '')

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                setupPomInfo(pom)

                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                    authentication(userName: SONATYPE_USERNAME, password: SONATYPE_PASSWORD)
                }

                snapshotRepository(url:
                        'https://oss.sonatype.org/content/repositories/snapshots/') {
                    authentication(userName: SONATYPE_USERNAME, password: SONATYPE_PASSWORD)
                }
            }
        }
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidMavenJavadocs(type: Javadoc, dependsOn: 'assembleRelease') {
        description "Generates Maven-friendly Javadocs for publishing."
        def matchingVariant

        android.libraryVariants.matching({variant -> variant.name.equals('release')}).each {
            variant ->
                matchingVariant = variant
        }

        source = files(matchingVariant.javaCompile.source) +
                files(matchingVariant.processJavaResources.source)
        ext.androidJar =
                "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(matchingVariant.javaCompile.classpath.files) + files(ext.androidJar)

        options {
            linksOffline 'http://d.android.com/reference', "${android.sdkDirectory}/docs/reference"
            charSet = 'UTF-8'
            use = true
            splitIndex = true
        }
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidMavenJavadocs) {
        classifier = 'javadoc'
        baseName = POM_ARTIFACT_ID
        from androidMavenJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        baseName = POM_ARTIFACT_ID
        from android.sourceSets.main.java.srcDirs
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }

    task checkSonatypeCredentials {
        doFirst {
            checkSonatypeCredentials
            if ([SONATYPE_USERNAME, SONATYPE_PASSWORD].contains('')) {
                throw new GradleException('Required Sonatype properties not set for publishing - ' +
                        'SONATYPE_USERNAME and SONATYPE_PASSWORD must be defined in ' +
                        '~/.gradle/gradle.properties.');
            }
        }
    }

    uploadArchives.dependsOn(checkSonatypeCredentials)
}

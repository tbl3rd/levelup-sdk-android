// Generated by delombok at Mon Feb 24 13:27:15 EST 2014
/**
 * Copyright 2013-2014 SCVNGR, Inc., D.B.A. LevelUp. All rights reserved.
 */
package com.scvngr.levelup.core.model;

import android.os.Parcel;
import android.os.Parcelable;
import net.jcip.annotations.Immutable;
import com.scvngr.levelup.core.annotation.LevelUpApi;
import com.scvngr.levelup.core.annotation.LevelUpApi.Contract;
import com.scvngr.levelup.core.annotation.NonNull;
import com.scvngr.levelup.core.annotation.Nullable;
import com.scvngr.levelup.core.util.NullUtils;
// The code below will be machine-processed.
// CHECKSTYLE:OFF

/**
 * A connected app.
 */
@Immutable
@LevelUpApi(contract = Contract.DRAFT)
public final class App implements Parcelable {
    
    /**
     * Implements the {@code Parcelable} interface.
     */
    @NonNull
    public static final Creator<App> CREATOR = new AppCreator();
    
    /**
     * A short, human-readable description of the app.
     */
    @NonNull
    private final String description;
    
    /**
     * The web service ID for the app.
     */
    private final long id;
    
    /**
     * A URL of an image that represents the app.
     */
    @Nullable
    private final String imageUrl;
    
    /**
     * The human-readable name of the app.
     */
    @NonNull
    private final String name;

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        ((AppCreator)CREATOR).writeToParcel(NullUtils.nonNullContract(dest), this);
    }
    /* package */

    static final class AppCreator implements Creator<App> {


        @Override
        public App[] newArray(int size) {
            return new App[size];
        }

        @Override
        public App createFromParcel(Parcel source) {
            final String description = NullUtils.nonNullContract(source.readString());
            final long id = source.readLong();
            final String imageUrl = source.readString();
            final String name = NullUtils.nonNullContract(source.readString());
            return new App(description, id, imageUrl, name);
        }
        /* package */

        void writeToParcel(@NonNull final Parcel dest, @NonNull final App app) {
            dest.writeString(app.getDescription());
            dest.writeLong(app.getId());
            dest.writeString(app.getImageUrl());
            dest.writeString(app.getName());
        }
    }

    /**
     * A short, human-readable description of the app.
     */
    @NonNull
    @SuppressWarnings("all")
    public String getDescription() {
        return this.description;
    }

    /**
     * The web service ID for the app.
     */
    @SuppressWarnings("all")
    public long getId() {
        return this.id;
    }

    /**
     * A URL of an image that represents the app.
     */
    @Nullable
    @SuppressWarnings("all")
    public String getImageUrl() {
        return this.imageUrl;
    }

    /**
     * The human-readable name of the app.
     */
    @NonNull
    @SuppressWarnings("all")
    public String getName() {
        return this.name;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof App)) return false;
        final App other = (App)o;
        final Object this$description = this.getDescription();
        final Object other$description = other.getDescription();
        if (this$description == null ? other$description != null : !this$description.equals(other$description)) return false;
        if (this.getId() != other.getId()) return false;
        final Object this$imageUrl = this.getImageUrl();
        final Object other$imageUrl = other.getImageUrl();
        if (this$imageUrl == null ? other$imageUrl != null : !this$imageUrl.equals(other$imageUrl)) return false;
        final Object this$name = this.getName();
        final Object other$name = other.getName();
        if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
        return true;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 277;
        int result = 1;
        final Object $description = this.getDescription();
        result = result * PRIME + ($description == null ? 0 : $description.hashCode());
        final long $id = this.getId();
        result = result * PRIME + (int)($id >>> 32 ^ $id);
        final Object $imageUrl = this.getImageUrl();
        result = result * PRIME + ($imageUrl == null ? 0 : $imageUrl.hashCode());
        final Object $name = this.getName();
        result = result * PRIME + ($name == null ? 0 : $name.hashCode());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "App(description=" + this.getDescription() + ", id=" + this.getId() + ", imageUrl=" + this.getImageUrl() + ", name=" + this.getName() + ")";
    }

    @SuppressWarnings("all")
    public App(@NonNull final String description, final long id, @Nullable final String imageUrl, @NonNull final String name) {
        if (description == null) {
            throw new NullPointerException("description");
        }
        if (name == null) {
            throw new NullPointerException("name");
        }
        this.description = description;
        this.id = id;
        this.imageUrl = imageUrl;
        this.name = name;
    }
}
// Generated by delombok at Mon Feb 24 11:04:40 EST 2014
/**
 * Copyright 2013-2014 SCVNGR, Inc., D.B.A. LevelUp. All rights reserved.
 */
package com.scvngr.levelup.core.model;

import android.os.Parcel;
import android.os.Parcelable;
import com.scvngr.levelup.core.annotation.LevelUpApi;
import com.scvngr.levelup.core.annotation.LevelUpApi.Contract;
import com.scvngr.levelup.core.annotation.NonNull;
import com.scvngr.levelup.core.util.NullUtils;
import net.jcip.annotations.Immutable;
// The code below will be machine-processed.
// CHECKSTYLE:OFF

/**
 * A single permission of a {@link PermissionsRequest}.
 */
@Immutable
@LevelUpApi(contract = Contract.DRAFT)
public final class Permission implements Parcelable {
    
    /**
     * {@link Parcelable} creator.
     */
    @NonNull
    public static final Creator<Permission> CREATOR = new PermissionCreator();
    
    /**
     * A short, human-readable description of this permission.
     */
    @NonNull
    private final String description;
    
    /**
     * The unique identifier for this type of permission.
     */
    @NonNull
    private final String keyname;

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        ((PermissionCreator)CREATOR).writeToParcel(NullUtils.nonNullContract(dest), this);
    }
    /* package */

    static final class PermissionCreator implements Creator<Permission> {


        @Override
        public Permission[] newArray(int size) {
            return new Permission[size];
        }

        @Override
        public Permission createFromParcel(Parcel source) {
            final java.lang.String description = NullUtils.nonNullContract(source.readString());
            final java.lang.String keyname = NullUtils.nonNullContract(source.readString());
            return new Permission(description, keyname);
        }
        /* package */

        void writeToParcel(@NonNull final Parcel dest, @NonNull final Permission permission) {
            dest.writeString(permission.getDescription());
            dest.writeString(permission.getKeyname());
        }
    }

    /**
     * A short, human-readable description of this permission.
     */
    @NonNull
    @SuppressWarnings("all")
    public String getDescription() {
        return this.description;
    }

    /**
     * The unique identifier for this type of permission.
     */
    @NonNull
    @SuppressWarnings("all")
    public String getKeyname() {
        return this.keyname;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof Permission)) return false;
        final Permission other = (Permission)o;
        final Object this$description = this.getDescription();
        final Object other$description = other.getDescription();
        if (this$description == null ? other$description != null : !this$description.equals(other$description)) return false;
        final Object this$keyname = this.getKeyname();
        final Object other$keyname = other.getKeyname();
        if (this$keyname == null ? other$keyname != null : !this$keyname.equals(other$keyname)) return false;
        return true;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 277;
        int result = 1;
        final Object $description = this.getDescription();
        result = result * PRIME + ($description == null ? 0 : $description.hashCode());
        final Object $keyname = this.getKeyname();
        result = result * PRIME + ($keyname == null ? 0 : $keyname.hashCode());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "Permission(description=" + this.getDescription() + ", keyname=" + this.getKeyname() + ")";
    }

    @SuppressWarnings("all")
    public Permission(@NonNull final String description, @NonNull final String keyname) {
        if (description == null) {
            throw new NullPointerException("description");
        }
        if (keyname == null) {
            throw new NullPointerException("keyname");
        }
        this.description = description;
        this.keyname = keyname;
    }
}
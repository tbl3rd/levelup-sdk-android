// Generated by delombok at Fri May 09 16:35:20 EDT 2014
/*
 * Copyright 2013-2014 SCVNGR, Inc., D.B.A. LevelUp. All rights reserved.
 */
package com.scvngr.levelup.core.model;

import android.os.Parcel;
import android.os.Parcelable;
import net.jcip.annotations.Immutable;
import com.scvngr.levelup.core.annotation.LevelUpApi;
import com.scvngr.levelup.core.annotation.LevelUpApi.Contract;
import com.scvngr.levelup.core.annotation.NonNull;
import com.scvngr.levelup.core.annotation.Nullable;
import com.scvngr.levelup.core.util.NullUtils;
// The code below will be machine-processed.
// CHECKSTYLE:OFF

/**
 * Represents an error from the server.
 */
@Immutable
@LevelUpApi(contract = Contract.DRAFT)
public final class Error implements Parcelable {
    
    /**
     * Creator for parceling.
     */
    @NonNull
    public static final Creator<Error> CREATOR = new ErrorCreator();
    
    /**
     * A machine-readable description of the error.
     */
    @Nullable
    private final String code;
    
    /**
     * The message for the error that occurred.
     */
    @NonNull
    private final String message;
    
    /**
     * The object that this error is for. This object is scoped to the context
     * of the web service.
     */
    @Nullable
    private final String object;
    
    /**
     * The property of the object that this error is for.
     */
    @Nullable
    private final String property;

    /**
     * @deprecated Provided for SDK backwards compatibility only. Newer code should use {@link
     * com.scvngr.levelup.core.model.Error#Error(String, String, String, String)} instead. This
     * constructor omits the {@link #code} field.
     */
    @Deprecated
    @SuppressWarnings("all")
    public Error(@NonNull final String message, @Nullable final String object, @Nullable final String property) {
        this(null, message, object, property);
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(final Parcel dest, final int flags) {
        ((ErrorCreator)CREATOR).writeToParcel(NullUtils.nonNullContract(dest), flags, this);
    }

    /**
     * Creator for creating {@link Error}s from parcels as well as writing {@link Error}s to
     * parcels.
     */
    @Immutable
    private static final class ErrorCreator implements Creator<Error> {


        @Override
        public Error[] newArray(final int size) {
            return new Error[size];
        }

        @NonNull
        @Override
        public Error createFromParcel(final Parcel in) {
            final String code = in.readString();
            final String message = NullUtils.nonNullContract(in.readString());
            final String object = in.readString();
            final String property = in.readString();
            return new Error(code, message, object, property);
        }

        private void writeToParcel(@NonNull final Parcel dest, final int flags, @NonNull final Error error) {
            dest.writeString(error.getCode());
            dest.writeString(error.getMessage());
            dest.writeString(error.getObject());
            dest.writeString(error.getProperty());
        }
    }

    /**
     * A machine-readable description of the error.
     */
    @Nullable
    @SuppressWarnings("all")
    public String getCode() {
        return this.code;
    }

    /**
     * The message for the error that occurred.
     */
    @NonNull
    @SuppressWarnings("all")
    public String getMessage() {
        return this.message;
    }

    /**
     * The object that this error is for. This object is scoped to the context
     * of the web service.
     */
    @Nullable
    @SuppressWarnings("all")
    public String getObject() {
        return this.object;
    }

    /**
     * The property of the object that this error is for.
     */
    @Nullable
    @SuppressWarnings("all")
    public String getProperty() {
        return this.property;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof Error)) return false;
        final Error other = (Error)o;
        final Object this$code = this.getCode();
        final Object other$code = other.getCode();
        if (this$code == null ? other$code != null : !this$code.equals(other$code)) return false;
        final Object this$message = this.getMessage();
        final Object other$message = other.getMessage();
        if (this$message == null ? other$message != null : !this$message.equals(other$message)) return false;
        final Object this$object = this.getObject();
        final Object other$object = other.getObject();
        if (this$object == null ? other$object != null : !this$object.equals(other$object)) return false;
        final Object this$property = this.getProperty();
        final Object other$property = other.getProperty();
        if (this$property == null ? other$property != null : !this$property.equals(other$property)) return false;
        return true;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $code = this.getCode();
        result = result * PRIME + ($code == null ? 0 : $code.hashCode());
        final Object $message = this.getMessage();
        result = result * PRIME + ($message == null ? 0 : $message.hashCode());
        final Object $object = this.getObject();
        result = result * PRIME + ($object == null ? 0 : $object.hashCode());
        final Object $property = this.getProperty();
        result = result * PRIME + ($property == null ? 0 : $property.hashCode());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "Error(code=" + this.getCode() + ", message=" + this.getMessage() + ", object=" + this.getObject() + ", property=" + this.getProperty() + ")";
    }

    @SuppressWarnings("all")
    public Error(@Nullable final String code, @NonNull final String message, @Nullable final String object, @Nullable final String property) {
        if (message == null) {
            throw new NullPointerException("message");
        }
        this.code = code;
        this.message = message;
        this.object = object;
        this.property = property;
    }
}
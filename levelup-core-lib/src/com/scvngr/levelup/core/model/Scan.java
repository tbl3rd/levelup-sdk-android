// Generated by delombok at Fri Jan 17 11:33:46 EST 2014
/*
 * Copyright 2013-2014 SCVNGR, Inc., D.B.A. LevelUp. All rights reserved.
 */
package com.scvngr.levelup.core.model;

import android.os.Parcel;
import android.os.Parcelable;
import net.jcip.annotations.Immutable;
import com.scvngr.levelup.core.annotation.LevelUpApi;
import com.scvngr.levelup.core.annotation.LevelUpApi.Contract;
import com.scvngr.levelup.core.annotation.NonNull;
// The code below will be machine-processed.
// CHECKSTYLE:OFF

/**
 * Model for representing a Scan. Currently, the {@link Scan} can be a code scanned using the camera
 * or a code HTTP hyperlink.
 */
@Immutable
@LevelUpApi(contract = Contract.INTERNAL)
public final class Scan implements Parcelable {
    
    /**
     * Implements the {@link Parcelable} interface.
     */
    public static final Creator<Scan> CREATOR = new ScanCreator();
    
    /**
     * The data from the scan.
     */
    @NonNull
    private final String data;

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(final Parcel dest, final int flags) {
        ((ScanCreator)CREATOR).writeToParcel(dest, flags, this);
    }

    /**
     * Handles parceling for {@link Scan}.
     */
    @Immutable
    private static final class ScanCreator implements Creator<Scan> {


        @NonNull
        @Override
        public Scan createFromParcel(final Parcel source) {
            final String data = source.readString();
            return new Scan(data);
        }

        @Override
        public Scan[] newArray(final int size) {
            return new Scan[size];
        }

        private void writeToParcel(@NonNull final Parcel dest, final int flags, @NonNull final Scan scan) {
            dest.writeString(scan.getData());
        }
    }

    /**
     * The data from the scan.
     */
    @NonNull
    @SuppressWarnings("all")
    public String getData() {
        return this.data;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof Scan)) return false;
        final Scan other = (Scan)o;
        final Object this$data = this.getData();
        final Object other$data = other.getData();
        if (this$data == null ? other$data != null : !this$data.equals(other$data)) return false;
        return true;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 277;
        int result = 1;
        final Object $data = this.getData();
        result = result * PRIME + ($data == null ? 0 : $data.hashCode());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "Scan(data=" + this.getData() + ")";
    }

    @SuppressWarnings("all")
    public Scan(@NonNull final String data) {
        if (data == null) {
            throw new NullPointerException("data");
        }
        this.data = data;
    }
}
// Generated by delombok at Mon Sep 09 14:46:10 EDT 2013
package com.scvngr.levelup.core.model;

import android.os.Parcel;
import android.os.Parcelable;
import net.jcip.annotations.Immutable;
import com.scvngr.levelup.core.annotation.LevelUpApi;
import com.scvngr.levelup.core.annotation.LevelUpApi.Contract;
import com.scvngr.levelup.core.annotation.NonNull;
// The code below will be machine-processed.
// CHECKSTYLE:OFF

/**
 * Represents the LevelUp access token.
 */
@Immutable
@LevelUpApi(contract = Contract.DRAFT)
public final class AccessToken implements Parcelable {
	
	/**
	 * Implements the {@code Parcelable} interface.
	 */
	public static final Creator<AccessToken> CREATOR = new AccessTokenCreator();
	
	/**
	 * Access token.
	 */
	@NonNull
	private final String accessToken;
	
	/**
	 * User's ID on the web service.
	 */
	@NonNull
	private final long userId;
	
	@Override
	public int describeContents() {
		return 0;
	}
	
	@Override
	public void writeToParcel(final Parcel dest, final int flags) {
		((AccessTokenCreator)CREATOR).writeToParcel(dest, flags, this);
	}
	
	/**
	 * Implements parceling/unparceling for {@link AccessToken}.
	 */
	@Immutable
	private static final class AccessTokenCreator implements Creator<AccessToken> {
		
		
		@Override
		public AccessToken[] newArray(final int size) {
			return new AccessToken[size];
		}
		
		@Override
		@NonNull
		public AccessToken createFromParcel(final Parcel in) {
			final String accessToken = in.readString();
			final long userId = in.readLong();
			return new AccessToken(accessToken, userId);
		}
		
		private void writeToParcel(@NonNull final Parcel dest, final int flags, @NonNull final AccessToken token) {
			dest.writeString(token.getAccessToken());
			dest.writeLong(token.getUserId());
		}
	}
	
	/**
	 * Access token.
	 */
	@NonNull
	@java.lang.SuppressWarnings("all")
	public String getAccessToken() {
		return this.accessToken;
	}
	
	/**
	 * User's ID on the web service.
	 */
	@NonNull
	@java.lang.SuppressWarnings("all")
	public long getUserId() {
		return this.userId;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof AccessToken)) return false;
		final AccessToken other = (AccessToken)o;
		final java.lang.Object this$accessToken = this.getAccessToken();
		final java.lang.Object other$accessToken = other.getAccessToken();
		if (this$accessToken == null ? other$accessToken != null : !this$accessToken.equals(other$accessToken)) return false;
		if (this.getUserId() != other.getUserId()) return false;
		return true;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 31;
		int result = 1;
		final java.lang.Object $accessToken = this.getAccessToken();
		result = result * PRIME + ($accessToken == null ? 0 : $accessToken.hashCode());
		final long $userId = this.getUserId();
		result = result * PRIME + (int)($userId >>> 32 ^ $userId);
		return result;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public java.lang.String toString() {
		return "AccessToken(accessToken=" + this.getAccessToken() + ", userId=" + this.getUserId() + ")";
	}
	
	@java.lang.SuppressWarnings("all")
	public AccessToken(@NonNull final String accessToken, @NonNull final long userId) {
		
		if (accessToken == null) {
			throw new java.lang.NullPointerException("accessToken");
		}
		this.accessToken = accessToken;
		this.userId = userId;
	}
}
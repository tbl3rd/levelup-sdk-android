// Generated by delombok at Fri Jan 17 13:41:08 EST 2014
/*
 * Copyright 2013-2014 SCVNGR, Inc., D.B.A. LevelUp. All rights reserved.
 */
package com.scvngr.levelup.core.model;

import android.os.Parcel;
import android.os.Parcelable;
import net.jcip.annotations.Immutable;
import com.scvngr.levelup.core.annotation.LevelUpApi;
import com.scvngr.levelup.core.annotation.LevelUpApi.Contract;
import com.scvngr.levelup.core.annotation.NonNull;
import com.scvngr.levelup.core.annotation.Nullable;
import com.scvngr.levelup.core.model.MonetaryValue;
import com.scvngr.levelup.core.util.NullUtils;
// The code below will be machine-processed.
// CHECKSTYLE:OFF

/**
 * Represents a campaign (which can be claimed for credit) on the server.
 */
@Immutable
@LevelUpApi(contract = Contract.DRAFT)
public final class Campaign implements Parcelable {
    
    /**
     * Whether or not this campaign's value is eligible to be spent at all merchants on LevelUp.
     */
    private final boolean appliesToAllMerchants;
    
    /**
     * The text to show when a successful claim of this campaign occurs.
     */
    @NonNull
    private final String confirmationHtml;
    
    /**
     * The ID of this Campaign on the web service.
     */
    private final long id;
    
    /**
     * The message to use as a body for an email share of this campaign.
     */
    @Nullable
    private final String messageForEmailBody;
    
    /**
     * The message to use as a the subject for an email share of this campaign.
     */
    @Nullable
    private final String messageForEmailSubject;
    
    /**
     * The message to use for a Twitter share of this campaign.
     */
    @Nullable
    private final String messageForTwitter;
    
    /**
     * The message to use for a Facebook share of this campaign.
     */
    @Nullable
    private final String messageForFacebook;
    
    /**
     * The name of this campaign.
     */
    @NonNull
    private final String name;
    
    /**
     * The text describing this campaign.
     */
    @NonNull
    private final String offerHtml;
    
    /**
     * The type of campaign this is.
     */
    @NonNull
    private final String type;
    
    /**
     * If this Campaign is eligible to be shared to others.
     */
    private final boolean shareable;
    
    /**
     * The URL to share via email.
     */
    @Nullable
    private final String shareUrlEmail;
    
    /**
     * The URL to share via Facebook.
     */
    @Nullable
    private final String shareUrlFacebook;
    
    /**
     * The URL to share via twitter.
     */
    @Nullable
    private final String shareUrlTwitter;
    
    /**
     * The name of the sponsor of this campaign.
     */
    @Nullable
    private final String sponsor;
    
    /**
     * The amount of credit the user would get for claiming this campaign.
     */
    @NonNull
    private final MonetaryValue value;
    
    /**
     * Implements the {@code Parcelable} interface.
     */
    @NonNull
    public static final Creator<Campaign> CREATOR = new CampaignCreator();

    @Override
    public final int describeContents() {
        return 0;
    }

    @Override
    public final void writeToParcel(final Parcel dest, final int flags) {
        ((CampaignCreator)CREATOR).writeToParcel(NullUtils.nonNullContract(dest), flags, this);
    }

    @Immutable
    private static class CampaignCreator implements Creator<Campaign> {


        @Override
        public Campaign[] newArray(final int size) {
            return new Campaign[size];
        }

        @NonNull
        @Override
        public Campaign createFromParcel(final Parcel in) {
            final CampaignBuilder builder = Campaign.builder();
            builder.appliesToAllMerchants(in.readByte() == (byte)1);
            builder.confirmationHtml(in.readString()).id(in.readLong());
            builder.messageForEmailBody(in.readString()).messageForEmailSubject(in.readString());
            builder.messageForFacebook(in.readString());
            builder.messageForTwitter(in.readString());
            builder.name(in.readString());
            builder.offerHtml(in.readString());
            builder.shareable(in.readByte() == (byte)1);
            builder.shareUrlEmail(in.readString());
            builder.shareUrlFacebook(in.readString());
            builder.shareUrlTwitter(in.readString());
            builder.sponsor(in.readString());
            builder.type(in.readString());
            builder.value((MonetaryValue)in.readParcelable(MonetaryValue.class.getClassLoader()));
            return NullUtils.nonNullContract(builder.build());
        }

        public final void writeToParcel(@NonNull final Parcel dest, final int flags, @NonNull final Campaign campaign) {
            dest.writeByte(campaign.appliesToAllMerchants ? (byte)1 : (byte)0);
            dest.writeString(campaign.confirmationHtml);
            dest.writeLong(campaign.id);
            dest.writeString(campaign.messageForEmailBody);
            dest.writeString(campaign.messageForEmailSubject);
            dest.writeString(campaign.messageForFacebook);
            dest.writeString(campaign.messageForTwitter);
            dest.writeString(campaign.name);
            dest.writeString(campaign.offerHtml);
            dest.writeByte(campaign.shareable ? (byte)1 : (byte)0);
            dest.writeString(campaign.shareUrlEmail);
            dest.writeString(campaign.shareUrlFacebook);
            dest.writeString(campaign.shareUrlTwitter);
            dest.writeString(campaign.sponsor);
            dest.writeString(campaign.type);
            dest.writeParcelable(campaign.value, flags);
        }
    }

    @SuppressWarnings("all")
    public static class CampaignBuilder {
        private boolean appliesToAllMerchants;
        private String confirmationHtml;
        private long id;
        private String messageForEmailBody;
        private String messageForEmailSubject;
        private String messageForTwitter;
        private String messageForFacebook;
        private String name;
        private String offerHtml;
        private String type;
        private boolean shareable;
        private String shareUrlEmail;
        private String shareUrlFacebook;
        private String shareUrlTwitter;
        private String sponsor;
        private MonetaryValue value;

        @SuppressWarnings("all")
        CampaignBuilder() {
        }

        @SuppressWarnings("all")
        public CampaignBuilder appliesToAllMerchants(final boolean appliesToAllMerchants) {
            this.appliesToAllMerchants = appliesToAllMerchants;
            return this;
        }

        @SuppressWarnings("all")
        public CampaignBuilder confirmationHtml(final String confirmationHtml) {
            this.confirmationHtml = confirmationHtml;
            return this;
        }

        @SuppressWarnings("all")
        public CampaignBuilder id(final long id) {
            this.id = id;
            return this;
        }

        @SuppressWarnings("all")
        public CampaignBuilder messageForEmailBody(final String messageForEmailBody) {
            this.messageForEmailBody = messageForEmailBody;
            return this;
        }

        @SuppressWarnings("all")
        public CampaignBuilder messageForEmailSubject(final String messageForEmailSubject) {
            this.messageForEmailSubject = messageForEmailSubject;
            return this;
        }

        @SuppressWarnings("all")
        public CampaignBuilder messageForTwitter(final String messageForTwitter) {
            this.messageForTwitter = messageForTwitter;
            return this;
        }

        @SuppressWarnings("all")
        public CampaignBuilder messageForFacebook(final String messageForFacebook) {
            this.messageForFacebook = messageForFacebook;
            return this;
        }

        @SuppressWarnings("all")
        public CampaignBuilder name(final String name) {
            this.name = name;
            return this;
        }

        @SuppressWarnings("all")
        public CampaignBuilder offerHtml(final String offerHtml) {
            this.offerHtml = offerHtml;
            return this;
        }

        @SuppressWarnings("all")
        public CampaignBuilder type(final String type) {
            this.type = type;
            return this;
        }

        @SuppressWarnings("all")
        public CampaignBuilder shareable(final boolean shareable) {
            this.shareable = shareable;
            return this;
        }

        @SuppressWarnings("all")
        public CampaignBuilder shareUrlEmail(final String shareUrlEmail) {
            this.shareUrlEmail = shareUrlEmail;
            return this;
        }

        @SuppressWarnings("all")
        public CampaignBuilder shareUrlFacebook(final String shareUrlFacebook) {
            this.shareUrlFacebook = shareUrlFacebook;
            return this;
        }

        @SuppressWarnings("all")
        public CampaignBuilder shareUrlTwitter(final String shareUrlTwitter) {
            this.shareUrlTwitter = shareUrlTwitter;
            return this;
        }

        @SuppressWarnings("all")
        public CampaignBuilder sponsor(final String sponsor) {
            this.sponsor = sponsor;
            return this;
        }

        @SuppressWarnings("all")
        public CampaignBuilder value(final MonetaryValue value) {
            this.value = value;
            return this;
        }

        @SuppressWarnings("all")
        public Campaign build() {
            return new Campaign(appliesToAllMerchants, confirmationHtml, id, messageForEmailBody, messageForEmailSubject, messageForTwitter, messageForFacebook, name, offerHtml, type, shareable, shareUrlEmail, shareUrlFacebook, shareUrlTwitter, sponsor, value);
        }

        @Override
        @SuppressWarnings("all")
        public String toString() {
            return "Campaign.CampaignBuilder(appliesToAllMerchants=" + this.appliesToAllMerchants + ", confirmationHtml=" + this.confirmationHtml + ", id=" + this.id + ", messageForEmailBody=" + this.messageForEmailBody + ", messageForEmailSubject=" + this.messageForEmailSubject + ", messageForTwitter=" + this.messageForTwitter + ", messageForFacebook=" + this.messageForFacebook + ", name=" + this.name + ", offerHtml=" + this.offerHtml + ", type=" + this.type + ", shareable=" + this.shareable + ", shareUrlEmail=" + this.shareUrlEmail + ", shareUrlFacebook=" + this.shareUrlFacebook + ", shareUrlTwitter=" + this.shareUrlTwitter + ", sponsor=" + this.sponsor + ", value=" + this.value + ")";
        }
    }

    @SuppressWarnings("all")
    public static CampaignBuilder builder() {
        return new CampaignBuilder();
    }

    /**
     * Whether or not this campaign's value is eligible to be spent at all merchants on LevelUp.
     */
    @SuppressWarnings("all")
    public boolean isAppliesToAllMerchants() {
        return this.appliesToAllMerchants;
    }

    /**
     * The text to show when a successful claim of this campaign occurs.
     */
    @NonNull
    @SuppressWarnings("all")
    public String getConfirmationHtml() {
        return this.confirmationHtml;
    }

    /**
     * The ID of this Campaign on the web service.
     */
    @SuppressWarnings("all")
    public long getId() {
        return this.id;
    }

    /**
     * The message to use as a body for an email share of this campaign.
     */
    @Nullable
    @SuppressWarnings("all")
    public String getMessageForEmailBody() {
        return this.messageForEmailBody;
    }

    /**
     * The message to use as a the subject for an email share of this campaign.
     */
    @Nullable
    @SuppressWarnings("all")
    public String getMessageForEmailSubject() {
        return this.messageForEmailSubject;
    }

    /**
     * The message to use for a Twitter share of this campaign.
     */
    @Nullable
    @SuppressWarnings("all")
    public String getMessageForTwitter() {
        return this.messageForTwitter;
    }

    /**
     * The message to use for a Facebook share of this campaign.
     */
    @Nullable
    @SuppressWarnings("all")
    public String getMessageForFacebook() {
        return this.messageForFacebook;
    }

    /**
     * The name of this campaign.
     */
    @NonNull
    @SuppressWarnings("all")
    public String getName() {
        return this.name;
    }

    /**
     * The text describing this campaign.
     */
    @NonNull
    @SuppressWarnings("all")
    public String getOfferHtml() {
        return this.offerHtml;
    }

    /**
     * The type of campaign this is.
     */
    @NonNull
    @SuppressWarnings("all")
    public String getType() {
        return this.type;
    }

    /**
     * If this Campaign is eligible to be shared to others.
     */
    @SuppressWarnings("all")
    public boolean isShareable() {
        return this.shareable;
    }

    /**
     * The URL to share via email.
     */
    @Nullable
    @SuppressWarnings("all")
    public String getShareUrlEmail() {
        return this.shareUrlEmail;
    }

    /**
     * The URL to share via Facebook.
     */
    @Nullable
    @SuppressWarnings("all")
    public String getShareUrlFacebook() {
        return this.shareUrlFacebook;
    }

    /**
     * The URL to share via twitter.
     */
    @Nullable
    @SuppressWarnings("all")
    public String getShareUrlTwitter() {
        return this.shareUrlTwitter;
    }

    /**
     * The name of the sponsor of this campaign.
     */
    @Nullable
    @SuppressWarnings("all")
    public String getSponsor() {
        return this.sponsor;
    }

    /**
     * The amount of credit the user would get for claiming this campaign.
     */
    @NonNull
    @SuppressWarnings("all")
    public MonetaryValue getValue() {
        return this.value;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof Campaign)) return false;
        final Campaign other = (Campaign)o;
        if (this.isAppliesToAllMerchants() != other.isAppliesToAllMerchants()) return false;
        final Object this$confirmationHtml = this.getConfirmationHtml();
        final Object other$confirmationHtml = other.getConfirmationHtml();
        if (this$confirmationHtml == null ? other$confirmationHtml != null : !this$confirmationHtml.equals(other$confirmationHtml)) return false;
        if (this.getId() != other.getId()) return false;
        final Object this$messageForEmailBody = this.getMessageForEmailBody();
        final Object other$messageForEmailBody = other.getMessageForEmailBody();
        if (this$messageForEmailBody == null ? other$messageForEmailBody != null : !this$messageForEmailBody.equals(other$messageForEmailBody)) return false;
        final Object this$messageForEmailSubject = this.getMessageForEmailSubject();
        final Object other$messageForEmailSubject = other.getMessageForEmailSubject();
        if (this$messageForEmailSubject == null ? other$messageForEmailSubject != null : !this$messageForEmailSubject.equals(other$messageForEmailSubject)) return false;
        final Object this$messageForTwitter = this.getMessageForTwitter();
        final Object other$messageForTwitter = other.getMessageForTwitter();
        if (this$messageForTwitter == null ? other$messageForTwitter != null : !this$messageForTwitter.equals(other$messageForTwitter)) return false;
        final Object this$messageForFacebook = this.getMessageForFacebook();
        final Object other$messageForFacebook = other.getMessageForFacebook();
        if (this$messageForFacebook == null ? other$messageForFacebook != null : !this$messageForFacebook.equals(other$messageForFacebook)) return false;
        final Object this$name = this.getName();
        final Object other$name = other.getName();
        if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
        final Object this$offerHtml = this.getOfferHtml();
        final Object other$offerHtml = other.getOfferHtml();
        if (this$offerHtml == null ? other$offerHtml != null : !this$offerHtml.equals(other$offerHtml)) return false;
        final Object this$type = this.getType();
        final Object other$type = other.getType();
        if (this$type == null ? other$type != null : !this$type.equals(other$type)) return false;
        if (this.isShareable() != other.isShareable()) return false;
        final Object this$shareUrlEmail = this.getShareUrlEmail();
        final Object other$shareUrlEmail = other.getShareUrlEmail();
        if (this$shareUrlEmail == null ? other$shareUrlEmail != null : !this$shareUrlEmail.equals(other$shareUrlEmail)) return false;
        final Object this$shareUrlFacebook = this.getShareUrlFacebook();
        final Object other$shareUrlFacebook = other.getShareUrlFacebook();
        if (this$shareUrlFacebook == null ? other$shareUrlFacebook != null : !this$shareUrlFacebook.equals(other$shareUrlFacebook)) return false;
        final Object this$shareUrlTwitter = this.getShareUrlTwitter();
        final Object other$shareUrlTwitter = other.getShareUrlTwitter();
        if (this$shareUrlTwitter == null ? other$shareUrlTwitter != null : !this$shareUrlTwitter.equals(other$shareUrlTwitter)) return false;
        final Object this$sponsor = this.getSponsor();
        final Object other$sponsor = other.getSponsor();
        if (this$sponsor == null ? other$sponsor != null : !this$sponsor.equals(other$sponsor)) return false;
        final Object this$value = this.getValue();
        final Object other$value = other.getValue();
        if (this$value == null ? other$value != null : !this$value.equals(other$value)) return false;
        return true;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 277;
        int result = 1;
        result = result * PRIME + (this.isAppliesToAllMerchants() ? 2609 : 2591);
        final Object $confirmationHtml = this.getConfirmationHtml();
        result = result * PRIME + ($confirmationHtml == null ? 0 : $confirmationHtml.hashCode());
        final long $id = this.getId();
        result = result * PRIME + (int)($id >>> 32 ^ $id);
        final Object $messageForEmailBody = this.getMessageForEmailBody();
        result = result * PRIME + ($messageForEmailBody == null ? 0 : $messageForEmailBody.hashCode());
        final Object $messageForEmailSubject = this.getMessageForEmailSubject();
        result = result * PRIME + ($messageForEmailSubject == null ? 0 : $messageForEmailSubject.hashCode());
        final Object $messageForTwitter = this.getMessageForTwitter();
        result = result * PRIME + ($messageForTwitter == null ? 0 : $messageForTwitter.hashCode());
        final Object $messageForFacebook = this.getMessageForFacebook();
        result = result * PRIME + ($messageForFacebook == null ? 0 : $messageForFacebook.hashCode());
        final Object $name = this.getName();
        result = result * PRIME + ($name == null ? 0 : $name.hashCode());
        final Object $offerHtml = this.getOfferHtml();
        result = result * PRIME + ($offerHtml == null ? 0 : $offerHtml.hashCode());
        final Object $type = this.getType();
        result = result * PRIME + ($type == null ? 0 : $type.hashCode());
        result = result * PRIME + (this.isShareable() ? 2609 : 2591);
        final Object $shareUrlEmail = this.getShareUrlEmail();
        result = result * PRIME + ($shareUrlEmail == null ? 0 : $shareUrlEmail.hashCode());
        final Object $shareUrlFacebook = this.getShareUrlFacebook();
        result = result * PRIME + ($shareUrlFacebook == null ? 0 : $shareUrlFacebook.hashCode());
        final Object $shareUrlTwitter = this.getShareUrlTwitter();
        result = result * PRIME + ($shareUrlTwitter == null ? 0 : $shareUrlTwitter.hashCode());
        final Object $sponsor = this.getSponsor();
        result = result * PRIME + ($sponsor == null ? 0 : $sponsor.hashCode());
        final Object $value = this.getValue();
        result = result * PRIME + ($value == null ? 0 : $value.hashCode());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "Campaign(appliesToAllMerchants=" + this.isAppliesToAllMerchants() + ", confirmationHtml=" + this.getConfirmationHtml() + ", id=" + this.getId() + ", messageForEmailBody=" + this.getMessageForEmailBody() + ", messageForEmailSubject=" + this.getMessageForEmailSubject() + ", messageForTwitter=" + this.getMessageForTwitter() + ", messageForFacebook=" + this.getMessageForFacebook() + ", name=" + this.getName() + ", offerHtml=" + this.getOfferHtml() + ", type=" + this.getType() + ", shareable=" + this.isShareable() + ", shareUrlEmail=" + this.getShareUrlEmail() + ", shareUrlFacebook=" + this.getShareUrlFacebook() + ", shareUrlTwitter=" + this.getShareUrlTwitter() + ", sponsor=" + this.getSponsor() + ", value=" + this.getValue() + ")";
    }

    @SuppressWarnings("all")
    public Campaign(final boolean appliesToAllMerchants, @NonNull final String confirmationHtml, final long id, @Nullable final String messageForEmailBody, @Nullable final String messageForEmailSubject, @Nullable final String messageForTwitter, @Nullable final String messageForFacebook, @NonNull final String name, @NonNull final String offerHtml, @NonNull final String type, final boolean shareable, @Nullable final String shareUrlEmail, @Nullable final String shareUrlFacebook, @Nullable final String shareUrlTwitter, @Nullable final String sponsor, @NonNull final MonetaryValue value) {
        if (confirmationHtml == null) {
            throw new NullPointerException("confirmationHtml");
        }
        if (name == null) {
            throw new NullPointerException("name");
        }
        if (offerHtml == null) {
            throw new NullPointerException("offerHtml");
        }
        if (type == null) {
            throw new NullPointerException("type");
        }
        if (value == null) {
            throw new NullPointerException("value");
        }
        this.appliesToAllMerchants = appliesToAllMerchants;
        this.confirmationHtml = confirmationHtml;
        this.id = id;
        this.messageForEmailBody = messageForEmailBody;
        this.messageForEmailSubject = messageForEmailSubject;
        this.messageForTwitter = messageForTwitter;
        this.messageForFacebook = messageForFacebook;
        this.name = name;
        this.offerHtml = offerHtml;
        this.type = type;
        this.shareable = shareable;
        this.shareUrlEmail = shareUrlEmail;
        this.shareUrlFacebook = shareUrlFacebook;
        this.shareUrlTwitter = shareUrlTwitter;
        this.sponsor = sponsor;
        this.value = value;
    }
}
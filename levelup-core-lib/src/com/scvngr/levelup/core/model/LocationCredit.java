// Generated by delombok at Wed Jan 15 11:38:08 EST 2014
package com.scvngr.levelup.core.model;

import android.os.Parcel;
import android.os.Parcelable;
import net.jcip.annotations.Immutable;
import com.scvngr.levelup.core.annotation.LevelUpApi;
import com.scvngr.levelup.core.annotation.LevelUpApi.Contract;
import com.scvngr.levelup.core.annotation.NonNull;
import com.scvngr.levelup.core.annotation.Nullable;
import com.scvngr.levelup.core.model.MonetaryValue;
import com.scvngr.levelup.core.util.NullUtils;

/**
 * Represents a credit of a {@link Location} on the server.
 */
@Immutable
@LevelUpApi(contract = Contract.DRAFT)
public final class LocationCredit implements Parcelable {
	
	/**
	 * The amount of credit the merchant has credited.
	 */
	@Nullable
	private final MonetaryValue merchantFundedCreditValue;
	
	/**
	 * The total amount of credit.
	 */
	@NonNull
	private final MonetaryValue totalAmountValue;
	
	/**
	 * Implements the {@code Parcelable} interface.
	 */
	public static final Creator<LocationCredit> CREATOR = new LocationCreditCreator();
	
	@Override
	public int describeContents() {
		return 0;
	}
	
	@Override
	public void writeToParcel(final Parcel dest, final int flags) {
		((LocationCreditCreator)CREATOR).writeToParcel(NullUtils.nonNullContract(dest), flags, this);
	}
	
	@Immutable
	private static final class LocationCreditCreator implements Creator<LocationCredit> {
		
		
		@Override
		public LocationCredit[] newArray(final int size) {
			return new LocationCredit[size];
		}
		
		@Override
		public LocationCredit createFromParcel(final Parcel in) {
			final MonetaryValue merchantCreditValue = in.readParcelable(MonetaryValue.class.getClassLoader());
			final MonetaryValue totalValue = in.readParcelable(MonetaryValue.class.getClassLoader());
			return new LocationCredit(merchantCreditValue, NullUtils.nonNullContract(totalValue));
		}
		
		private void writeToParcel(@NonNull final Parcel dest, final int flags, @NonNull final LocationCredit locationCredit) {
			dest.writeParcelable(locationCredit.getMerchantFundedCreditValue(), flags);
			dest.writeParcelable(locationCredit.getTotalAmountValue(), flags);
		}
	}
	
	/**
	 * @param merchantFundedCreditValue the available merchant credit
	 * @param totalAmountValue the total credit available
	 */
	public LocationCredit(@Nullable final MonetaryValue merchantFundedCreditValue, @NonNull final MonetaryValue totalAmountValue) {
		
		this.merchantFundedCreditValue = merchantFundedCreditValue;
		this.totalAmountValue = totalAmountValue;
	}
	
	/**
	 * The amount of credit the merchant has credited.
	 */
	@Nullable
	@java.lang.SuppressWarnings("all")
	public MonetaryValue getMerchantFundedCreditValue() {
		return this.merchantFundedCreditValue;
	}
	
	/**
	 * The total amount of credit.
	 */
	@NonNull
	@java.lang.SuppressWarnings("all")
	public MonetaryValue getTotalAmountValue() {
		return this.totalAmountValue;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof LocationCredit)) return false;
		final LocationCredit other = (LocationCredit)o;
		final java.lang.Object this$merchantFundedCreditValue = this.getMerchantFundedCreditValue();
		final java.lang.Object other$merchantFundedCreditValue = other.getMerchantFundedCreditValue();
		if (this$merchantFundedCreditValue == null ? other$merchantFundedCreditValue != null : !this$merchantFundedCreditValue.equals(other$merchantFundedCreditValue)) return false;
		final java.lang.Object this$totalAmountValue = this.getTotalAmountValue();
		final java.lang.Object other$totalAmountValue = other.getTotalAmountValue();
		if (this$totalAmountValue == null ? other$totalAmountValue != null : !this$totalAmountValue.equals(other$totalAmountValue)) return false;
		return true;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 31;
		int result = 1;
		final java.lang.Object $merchantFundedCreditValue = this.getMerchantFundedCreditValue();
		result = result * PRIME + ($merchantFundedCreditValue == null ? 0 : $merchantFundedCreditValue.hashCode());
		final java.lang.Object $totalAmountValue = this.getTotalAmountValue();
		result = result * PRIME + ($totalAmountValue == null ? 0 : $totalAmountValue.hashCode());
		return result;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public java.lang.String toString() {
		return "LocationCredit(merchantFundedCreditValue=" + this.getMerchantFundedCreditValue() + ", totalAmountValue=" + this.getTotalAmountValue() + ")";
	}
}
// Generated by delombok at Wed Feb 26 18:03:01 EST 2014
/*
 * Copyright 2013-2014 SCVNGR, Inc., D.B.A. LevelUp. All rights reserved.
 */
package com.scvngr.levelup.core.model;

import android.os.Parcel;
import android.os.Parcelable;
import net.jcip.annotations.Immutable;
import com.scvngr.levelup.core.annotation.LevelUpApi;
import com.scvngr.levelup.core.annotation.LevelUpApi.Contract;
import com.scvngr.levelup.core.annotation.NonNull;
import com.scvngr.levelup.core.annotation.Nullable;
import com.scvngr.levelup.core.util.NullUtils;
// The code below will be machine-processed.
// CHECKSTYLE:OFF

/**
 * Represents a credit of a {@link Location} on the server.
 */
@Immutable
@LevelUpApi(contract = Contract.DRAFT)
public final class LocationCredit implements Parcelable {
    
    /**
     * The amount of credit the merchant has credited.
     */
    @Nullable
    private final MonetaryValue merchantFundedCreditValue;
    
    /**
     * The total amount of credit.
     */
    @NonNull
    private final MonetaryValue totalAmountValue;
    
    /**
     * Implements the {@code Parcelable} interface.
     */
    @NonNull
    public static final Creator<LocationCredit> CREATOR = new LocationCreditCreator();

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(final Parcel dest, final int flags) {
        ((LocationCreditCreator)CREATOR).writeToParcel(NullUtils.nonNullContract(dest), flags, this);
    }

    @Immutable
    private static final class LocationCreditCreator implements Creator<LocationCredit> {


        @Override
        public LocationCredit[] newArray(final int size) {
            return new LocationCredit[size];
        }

        @Override
        public LocationCredit createFromParcel(final Parcel in) {
            final MonetaryValue merchantCreditValue = in.readParcelable(MonetaryValue.class.getClassLoader());
            final MonetaryValue totalValue = in.readParcelable(MonetaryValue.class.getClassLoader());
            return new LocationCredit(merchantCreditValue, NullUtils.nonNullContract(totalValue));
        }

        private void writeToParcel(@NonNull final Parcel dest, final int flags, @NonNull final LocationCredit locationCredit) {
            dest.writeParcelable(locationCredit.getMerchantFundedCreditValue(), flags);
            dest.writeParcelable(locationCredit.getTotalAmountValue(), flags);
        }
    }

    /**
     * @param merchantFundedCreditValue the available merchant credit
     * @param totalAmountValue the total credit available
     */
    public LocationCredit(@Nullable final MonetaryValue merchantFundedCreditValue, @NonNull final MonetaryValue totalAmountValue) {
        this.merchantFundedCreditValue = merchantFundedCreditValue;
        this.totalAmountValue = totalAmountValue;
    }

    /**
     * The amount of credit the merchant has credited.
     */
    @Nullable
    @SuppressWarnings("all")
    public MonetaryValue getMerchantFundedCreditValue() {
        return this.merchantFundedCreditValue;
    }

    /**
     * The total amount of credit.
     */
    @NonNull
    @SuppressWarnings("all")
    public MonetaryValue getTotalAmountValue() {
        return this.totalAmountValue;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof LocationCredit)) return false;
        final LocationCredit other = (LocationCredit)o;
        final Object this$merchantFundedCreditValue = this.getMerchantFundedCreditValue();
        final Object other$merchantFundedCreditValue = other.getMerchantFundedCreditValue();
        if (this$merchantFundedCreditValue == null ? other$merchantFundedCreditValue != null : !this$merchantFundedCreditValue.equals(other$merchantFundedCreditValue)) return false;
        final Object this$totalAmountValue = this.getTotalAmountValue();
        final Object other$totalAmountValue = other.getTotalAmountValue();
        if (this$totalAmountValue == null ? other$totalAmountValue != null : !this$totalAmountValue.equals(other$totalAmountValue)) return false;
        return true;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 277;
        int result = 1;
        final Object $merchantFundedCreditValue = this.getMerchantFundedCreditValue();
        result = result * PRIME + ($merchantFundedCreditValue == null ? 0 : $merchantFundedCreditValue.hashCode());
        final Object $totalAmountValue = this.getTotalAmountValue();
        result = result * PRIME + ($totalAmountValue == null ? 0 : $totalAmountValue.hashCode());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "LocationCredit(merchantFundedCreditValue=" + this.getMerchantFundedCreditValue() + ", totalAmountValue=" + this.getTotalAmountValue() + ")";
    }
}
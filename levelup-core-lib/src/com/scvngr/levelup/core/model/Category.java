// Generated by delombok at Fri Jan 17 13:41:08 EST 2014
/*
 * Copyright 2013-2014 SCVNGR, Inc., D.B.A. LevelUp. All rights reserved.
 */
package com.scvngr.levelup.core.model;

import android.os.Parcel;
import android.os.Parcelable;
import net.jcip.annotations.Immutable;
import com.scvngr.levelup.core.annotation.LevelUpApi;
import com.scvngr.levelup.core.annotation.LevelUpApi.Contract;
import com.scvngr.levelup.core.annotation.NonNull;
import com.scvngr.levelup.core.util.NullUtils;
// The code below will be machine-processed.
// CHECKSTYLE:OFF

/**
 * A location category.
 */
@Immutable
@LevelUpApi(contract = Contract.INTERNAL)
public final class Category implements Parcelable {
    
    /**
     * Parcelable creator.
     */
    @NonNull
    public static final Creator<Category> CREATOR = new Creator<Category>(){


        @Override
        public Category createFromParcel(final Parcel source) {
            return new Category(NullUtils.nonNullContract(source));
        }

        @Override
        public Category[] newArray(final int size) {
            return new Category[size];
        }
    };
    
    /**
     * Web service ID for the category.
     */
    private final int id;
    
    /**
     * Category name.
     */
    @NonNull
    private final String name;

    /**
     * Construct from a parcel.
     *
     * @param in parcel to read from.
     */
    public Category(@NonNull final Parcel in) {
        id = in.readInt();
        name = NullUtils.nonNullContract(in.readString());
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(final Parcel dest, final int flags) {
        dest.writeInt(id);
        dest.writeString(name);
    }

    /**
     * Web service ID for the category.
     */
    @SuppressWarnings("all")
    public int getId() {
        return this.id;
    }

    /**
     * Category name.
     */
    @NonNull
    @SuppressWarnings("all")
    public String getName() {
        return this.name;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof Category)) return false;
        final Category other = (Category)o;
        if (this.getId() != other.getId()) return false;
        final Object this$name = this.getName();
        final Object other$name = other.getName();
        if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
        return true;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 277;
        int result = 1;
        result = result * PRIME + this.getId();
        final Object $name = this.getName();
        result = result * PRIME + ($name == null ? 0 : $name.hashCode());
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "Category(id=" + this.getId() + ", name=" + this.getName() + ")";
    }

    @SuppressWarnings("all")
    public Category(final int id, @NonNull final String name) {
        if (name == null) {
            throw new NullPointerException("name");
        }
        this.id = id;
        this.name = name;
    }
}
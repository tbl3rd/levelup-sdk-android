// Generated by delombok at Fri May 09 16:35:20 EDT 2014
/*
 * Copyright 2013-2014 SCVNGR, Inc., D.B.A. LevelUp. All rights reserved.
 */
package com.scvngr.levelup.core.model;

import android.os.Parcel;
import android.os.Parcelable;
import net.jcip.annotations.Immutable;
import com.scvngr.levelup.core.annotation.LevelUpApi;
import com.scvngr.levelup.core.annotation.NonNull;
import com.scvngr.levelup.core.annotation.Nullable;
import com.scvngr.levelup.core.annotation.LevelUpApi.Contract;
import com.scvngr.levelup.core.util.NullUtils;
//The code below will be machine-processed.
//CHECKSTYLE:OFF

/**
 * Represents a feedback for an {@link com.scvngr.levelup.core.model.Order} which a user can
 * submit.
 */
@Immutable
@LevelUpApi(contract = Contract.DRAFT)
public final class Feedback implements Parcelable {
    
    /**
     * Optional comments a user can leave for an order.
     */
    @Nullable
    private final String comment;
    
    /**
     * The question text displayed to the user associated with the comments the user filled out.
     */
    @NonNull
    private final String questionText;
    
    /**
     * The 1-5 star rating the user gives for an order.
     */
    private final int rating;
    
    /**
     * Implements the {@code Parcelable} interface.
     */
    @NonNull
    public static final Parcelable.Creator<Feedback> CREATOR = new FeedbackCreator();

    @Override
    public final int describeContents() {
        return 0;
    }

    @Override
    public final void writeToParcel(final Parcel dest, final int flags) {
        ((FeedbackCreator)CREATOR).writeToParcel(NullUtils.nonNullContract(dest), flags, this);
    }

    @Immutable
    private static class FeedbackCreator implements Parcelable.Creator<Feedback> {


        @Override
        public Feedback[] newArray(final int size) {
            return new Feedback[size];
        }

        @NonNull
        @Override
        public Feedback createFromParcel(final Parcel in) {
            return new Feedback(in.readString(), in.readString(), in.readInt());
        }

        public final void writeToParcel(@NonNull final Parcel dest, final int flags, @NonNull final Feedback feedback) {
            dest.writeString(feedback.getComment());
            dest.writeString(feedback.getQuestionText());
            dest.writeInt(feedback.getRating());
        }
    }

    /**
     * Optional comments a user can leave for an order.
     */
    @Nullable
    @SuppressWarnings("all")
    public String getComment() {
        return this.comment;
    }

    /**
     * The question text displayed to the user associated with the comments the user filled out.
     */
    @NonNull
    @SuppressWarnings("all")
    public String getQuestionText() {
        return this.questionText;
    }

    /**
     * The 1-5 star rating the user gives for an order.
     */
    @SuppressWarnings("all")
    public int getRating() {
        return this.rating;
    }

    @Override
    @SuppressWarnings("all")
    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof Feedback)) return false;
        final Feedback other = (Feedback)o;
        final Object this$comment = this.getComment();
        final Object other$comment = other.getComment();
        if (this$comment == null ? other$comment != null : !this$comment.equals(other$comment)) return false;
        final Object this$questionText = this.getQuestionText();
        final Object other$questionText = other.getQuestionText();
        if (this$questionText == null ? other$questionText != null : !this$questionText.equals(other$questionText)) return false;
        if (this.getRating() != other.getRating()) return false;
        return true;
    }

    @Override
    @SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $comment = this.getComment();
        result = result * PRIME + ($comment == null ? 0 : $comment.hashCode());
        final Object $questionText = this.getQuestionText();
        result = result * PRIME + ($questionText == null ? 0 : $questionText.hashCode());
        result = result * PRIME + this.getRating();
        return result;
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
        return "Feedback(comment=" + this.getComment() + ", questionText=" + this.getQuestionText() + ", rating=" + this.getRating() + ")";
    }

    @SuppressWarnings("all")
    public Feedback(@Nullable final String comment, @NonNull final String questionText, final int rating) {
        if (questionText == null) {
            throw new NullPointerException("questionText");
        }
        this.comment = comment;
        this.questionText = questionText;
        this.rating = rating;
    }
}